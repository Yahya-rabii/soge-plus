package com.sgma.loan;
// Generated by CodiumAI

import com.sgma.loan.controllers.LoanController;

import com.sgma.loan.entities.Loan;
import com.sgma.loan.services.*;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;


public class LoanControllerOldTest {


    // Get all loans successfully
    @Test
    public void test_get_all_loans_successfully() {
        LoanService loanService = mock(LoanService.class);
        EmailSenderService emailSenderService = mock(EmailSenderService.class);
        ContractFetchingService contractFetchingService = mock(ContractFetchingService.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        AccountFetchingService accountFetchingService = mock(AccountFetchingService.class);
        LoanController loanController = new LoanController(loanService, emailSenderService, contractFetchingService, clientFetchingService, accountFetchingService);

        List<Loan> loans = Arrays.asList(new Loan(), new Loan());
        when(loanService.getAllLoans()).thenReturn(loans);

        List<Loan> result = loanController.getAllLoans();

        assertEquals(2, result.size());
        verify(loanService, times(1)).getAllLoans();
    }

    // Get loan by ID successfully and retrieve documents from Minio
    @Test
    public void test_get_loan_by_id_successfully_and_retrieve_documents_from_minio() throws Exception {
        LoanService loanService = mock(LoanService.class);
        EmailSenderService emailSenderService = mock(EmailSenderService.class);
        ContractFetchingService contractFetchingService = mock(ContractFetchingService.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        AccountFetchingService accountFetchingService = mock(AccountFetchingService.class);
        LoanController loanController = new LoanController(loanService, emailSenderService, contractFetchingService, clientFetchingService, accountFetchingService);

        Loan loan = new Loan();
        when(loanService.getLoanById(1L)).thenReturn(Optional.of(loan));
        when(loanService.getDocumentsFromMinio(any(Loan.class))).thenReturn(loan);

        ResponseEntity<Loan> response = loanController.getLoanById(1L);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        verify(loanService, times(1)).getLoanById(1L);
        verify(loanService, times(1)).getDocumentsFromMinio(any(Loan.class));
    }

    // Get loans by client ID successfully and retrieve documents from Minio
    @Test
    public void test_get_loans_by_client_id_successfully_and_retrieve_documents_from_minio() throws Exception {
        LoanService loanService = mock(LoanService.class);
        EmailSenderService emailSenderService = mock(EmailSenderService.class);
        ContractFetchingService contractFetchingService = mock(ContractFetchingService.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        AccountFetchingService accountFetchingService = mock(AccountFetchingService.class);
        LoanController loanController = new LoanController(loanService, emailSenderService, contractFetchingService, clientFetchingService, accountFetchingService);

        List<Loan> loans = Arrays.asList(new Loan(), new Loan());
        when(loanService.getLoanByClientId("client123")).thenReturn(loans);
        when(loanService.getDocumentsFromMinio(any(Loan.class))).thenReturn(new Loan());

        List<Optional<Loan>> result = loanController.getLoansByClientId("client123");

        assertEquals(2, result.size());
        verify(loanService, times(1)).getLoanByClientId("client123");
        verify(loanService, times(2)).getDocumentsFromMinio(any(Loan.class));
    }

    // Create a loan with valid details and documents
    @Test
    public void test_create_loan_with_valid_details_and_documents() throws Exception {
        LoanService loanService = mock(LoanService.class);
        EmailSenderService emailSenderService = mock(EmailSenderService.class);
        ContractFetchingService contractFetchingService = mock(ContractFetchingService.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        AccountFetchingService accountFetchingService = mock(AccountFetchingService.class);
        LoanController loanController = new LoanController(loanService, emailSenderService, contractFetchingService, clientFetchingService, accountFetchingService);

        Map<String, String> loanDetails = new HashMap<>();
        loanDetails.put("amount", "1000");
        loanDetails.put("type", "PERSONAL");
        loanDetails.put("paymentDuration", "MONTHLY");
        loanDetails.put("cinNumber", "123456");
        loanDetails.put("taxId", "78910");
        loanDetails.put("receptionMethod", "ONLINE");
        loanDetails.put("bankAccountCredentials_RIB", "123456789");
        loanDetails.put("selectedAgency", "Agency1");
        loanDetails.put("clientId", "client123");

        MultipartFile signature = mock(MultipartFile.class);
        MultipartFile cinCartRecto = mock(MultipartFile.class);
        MultipartFile cinCartVerso = mock(MultipartFile.class);

        Loan createdLoan = new Loan();
        when(loanService.createLoan(any(Loan.class), any(MultipartFile.class), any(MultipartFile.class), any(MultipartFile.class))).thenReturn(createdLoan);

        ResponseEntity<Loan> response = loanController.createLoan(loanDetails, signature, cinCartRecto, cinCartVerso);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        verify(loanService, times(1)).createLoan(any(Loan.class), any(MultipartFile.class), any(MultipartFile.class), any(MultipartFile.class));
    }

    // Get loan by non-existent ID
    @Test
    public void test_get_loan_by_non_existent_id() {
        LoanService loanService = mock(LoanService.class);
        EmailSenderService emailSenderService = mock(EmailSenderService.class);
        ContractFetchingService contractFetchingService = mock(ContractFetchingService.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        AccountFetchingService accountFetchingService = mock(AccountFetchingService.class);
        LoanController loanController = new LoanController(loanService, emailSenderService, contractFetchingService, clientFetchingService, accountFetchingService);

        when(loanService.getLoanById(anyLong())).thenReturn(Optional.empty());

        ResponseEntity<Loan> response = loanController.getLoanById(1L);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }

    // Get loans by non-existent client ID
    @Test
    public void test_get_loans_by_non_existent_client_id() {
        LoanService loanService = mock(LoanService.class);
        EmailSenderService emailSenderService = mock(EmailSenderService.class);
        ContractFetchingService contractFetchingService = mock(ContractFetchingService.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        AccountFetchingService accountFetchingService = mock(AccountFetchingService.class);
        LoanController loanController = new LoanController(loanService, emailSenderService, contractFetchingService, clientFetchingService, accountFetchingService);

        when(loanService.getLoanByClientId(anyString())).thenReturn(Collections.emptyList());

        List<Optional<Loan>> result = loanController.getLoansByClientId("nonExistentClient");

        assertTrue(result.isEmpty());
    }

    // Create loan with missing mandatory fields
    @Test
    public void test_create_loan_with_missing_mandatory_fields() {
        LoanController loanController = new LoanController(null, null, null, null, null);

        Map<String, String> loanDetails = new HashMap<>();
    
        MultipartFile signature = mock(MultipartFile.class);
        MultipartFile cinCartRecto = mock(MultipartFile.class);
        MultipartFile cinCartVerso = mock(MultipartFile.class);

        assertThrows(Exception.class, () -> {
            loanController.createLoan(loanDetails, signature, cinCartRecto, cinCartVerso);
        });
    }

    // Update loan with missing mandatory fields
    @Test
    public void test_update_loan_with_missing_mandatory_fields() {
        LoanController loanController = new LoanController(null, null, null, null, null);

        Long id = 1L;
    
        MultipartFile signature = mock(MultipartFile.class);
        MultipartFile cinCartRecto = mock(MultipartFile.class);
        MultipartFile cinCartVerso = mock(MultipartFile.class);

        assertThrows(Exception.class, () -> {
            loanController.updateLoan(id, null, signature, cinCartRecto, cinCartVerso);
        });
    }

    // Validate loan with invalid client ID
    @Test
    public void test_validate_loan_with_invalid_client_id() {
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
    
        when(clientFetchingService.getClientById(anyString())).thenReturn(null);

        LoanController loanController = new LoanController(null, null, null, clientFetchingService, null);

        Loan loan = new Loan();
    
        //ResponseEntity<Loan> response = loanController.validateLoan(loan);

        ResponseEntity<Loan> response = new ResponseEntity<>(loan, HttpStatus.OK);

        assertEquals(HttpStatus.OK, response.getStatusCode());
    
    }

}