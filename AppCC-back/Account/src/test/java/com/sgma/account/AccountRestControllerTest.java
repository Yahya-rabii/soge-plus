package com.sgma.account;
// Generated by CodiumAI

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sgma.account.controllers.AccountRestController;

import com.sgma.account.entities.Account;
import com.sgma.account.entities.Card;
import com.sgma.account.enums.Type;
import com.sgma.account.model.Client;
import com.sgma.account.repository.AccountRepository;
import com.sgma.account.repository.CardRepository;
import com.sgma.account.services.ClientFetchingService;
import org.junit.jupiter.api.Test;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import java.math.BigInteger;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public class AccountRestControllerTest {


    // Retrieve all accounts successfully with associated clients and cards
    @Test
    public void test_retrieve_all_accounts_successfully_with_associated_clients_and_cards() {
        AccountRepository accountRepository = mock(AccountRepository.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        CardRepository cardRepository = mock(CardRepository.class);
        List<Account> accounts = Arrays.asList(new Account(1L, Type.SOGE, "client1", BigInteger.valueOf(123456), 1000.0, new ArrayList<>(), 1L));
        when(accountRepository.findAll()).thenReturn(accounts);
        when(clientFetchingService.getAccountHolderById("client1")).thenReturn(new Client("client1", "email@example.com", "First", "Last", null, null, 123456L, false));
        when(cardRepository.findById(1L)).thenReturn(Optional.of(new Card(1L, 12, 2025, BigInteger.valueOf(123456), 123, 456)));
        AccountRestController controller = new AccountRestController(accountRepository, clientFetchingService, null, null, null, cardRepository);
        ResponseEntity<Map<String, Object>> response = controller.getAllAccounts();
        assertEquals(200, response.getStatusCodeValue());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().containsKey("Accounts"));
        assertTrue(response.getBody().containsKey("clients"));
        assertTrue(response.getBody().containsKey("cards"));
    }

    // Retrieve a specific account by ID with associated client
    @Test
    public void test_retrieve_specific_account_by_id_with_associated_client() {
        AccountRepository accountRepository = mock(AccountRepository.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        Account account = new Account(1L, Type.SOGE_PLUS, "client1", BigInteger.valueOf(123456), 1000.0, new ArrayList<>(), 1L);
        when(accountRepository.findById(1L)).thenReturn(Optional.of(account));
        when(clientFetchingService.getAccountHolderById("client1")).thenReturn(new Client("client1", "email@example.com", "First", "Last", null, null, 123456L, false));
        AccountRestController controller = new AccountRestController(accountRepository, clientFetchingService, null, null, null, null);
        ResponseEntity<Map<String, Object>> response = controller.getAccountById(1L);
        assertEquals(200, response.getStatusCodeValue());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().containsKey("Account"));
        assertTrue(response.getBody().containsKey("client"));
    }

    // Create a new account with valid data and associated card
    @Test
    public void test_create_new_account_with_valid_data_and_associated_card() throws JsonProcessingException {
        AccountRepository accountRepository = mock(AccountRepository.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        CardRepository cardRepository = mock(CardRepository.class);
        ObjectMapper objectMapper = new ObjectMapper();
        String accountJson = objectMapper.writeValueAsString(new Account(null,Type.SOGE, "client1", BigInteger.valueOf(123456), 0.0, new ArrayList<>(), null));
        String cardJson = objectMapper.writeValueAsString(new Card(null, 12, 2025, BigInteger.valueOf(123456), 123, 456));
        MultipartFile chosenImage = mock(MultipartFile.class);
        when(clientFetchingService.getAccountHolderById("client1")).thenReturn(new Client("client1", "email@example.com", "First", "Last", null, null, 123456L, false));
        when(cardRepository.findByCardRib(BigInteger.valueOf(123456))).thenReturn(new Card(1L, 12, 2025, BigInteger.valueOf(123456), 123, 456));
        AccountRestController controller = new AccountRestController(accountRepository, clientFetchingService, null, null, null, cardRepository);
        Account createdAccount = controller.addAccount(accountJson, chosenImage, cardJson);
        assertNotNull(createdAccount);
    }

    // Update an existing account with valid data
    @Test
    public void test_update_existing_account_with_valid_data() {
        AccountRepository accountRepository = mock(AccountRepository.class);
        Account account = new Account(1L, Type.SOGE_PLUS, "client1", BigInteger.valueOf(123456), 1000.0, new ArrayList<>(), 1L);
        when(accountRepository.save(account)).thenReturn(account);
        AccountRestController controller = new AccountRestController(accountRepository, null, null, null, null, null);
        Account updatedAccount = controller.updateAccount(1L, account);
        assertNotNull(updatedAccount);
        assertEquals(Long.valueOf(1), updatedAccount.getId());
    }

    // Retrieve all accounts when no accounts exist
    @Test
    public void test_retrieve_all_accounts_when_no_accounts_exist() {
        AccountRepository accountRepository = mock(AccountRepository.class);
        when(accountRepository.findAll()).thenReturn(Collections.emptyList());
        AccountRestController controller = new AccountRestController(accountRepository, null, null, null, null, null);
        ResponseEntity<Map<String, Object>> response = controller.getAllAccounts();
        assertEquals(204, response.getStatusCodeValue());
    }

    // Retrieve a specific account by ID when the account does not exist
    @Test
    public void test_retrieve_specific_account_by_id_when_account_does_not_exist() {
        AccountRepository accountRepository = mock(AccountRepository.class);
        when(accountRepository.findById(1L)).thenReturn(Optional.empty());
        AccountRestController controller = new AccountRestController(accountRepository, null, null, null, null, null);
        ResponseEntity<Map<String, Object>> response = controller.getAccountById(1L);
        assertEquals(204, response.getStatusCodeValue());
    }

    // Create a new account when the client already has an account
    @Test
    public void test_create_new_account_when_client_already_has_account() throws JsonProcessingException {
        AccountRepository accountRepository = mock(AccountRepository.class);
        ClientFetchingService clientFetchingService = mock(ClientFetchingService.class);
        CardRepository cardRepository = mock(CardRepository.class);
        ObjectMapper objectMapper = new ObjectMapper();
        String accountJson = objectMapper.writeValueAsString(new Account(null, Type.SOGE, "client1", BigInteger.valueOf(123456), 0.0, new ArrayList<>(), null));
        String cardJson = objectMapper.writeValueAsString(new Card(null, 12, 2025, BigInteger.valueOf(123456), 123, 456));
        MultipartFile chosenImage = mock(MultipartFile.class);
        when(clientFetchingService.getAccountHolderById("client1")).thenReturn(new Client("client1", "email@example.com", "First", "Last", null, null, 123456L, true));
        AccountRestController controller = new AccountRestController(accountRepository, clientFetchingService, null, null, null, cardRepository);
        Account createdAccount = controller.addAccount(accountJson, chosenImage, cardJson);
        assertNull(createdAccount);
    }

    // Create a new account with invalid JSON data
    @Test
    public void test_create_new_account_with_invalid_json_data() {
        AccountRestController controller = new AccountRestController(null, null, null, null, null,null);
        String invalidJson = "{invalid}";
        MultipartFile chosenImage = mock(MultipartFile.class);
        Exception exception = assertThrows(RuntimeException.class,
                () -> controller.addAccount(invalidJson , chosenImage , invalidJson));
        assertTrue(exception.getCause() instanceof JsonProcessingException);
    }

}